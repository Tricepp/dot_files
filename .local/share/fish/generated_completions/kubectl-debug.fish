# kubectl-debug
# Autogenerated from man page /usr/local/share/man/man1/kubectl-debug.1
complete -c kubectl-debug -l arguments-only -d '	If specified, everything after -- will be passed to the new container as Arg…'
complete -c kubectl-debug -l attach -d '	If true, wait for the container to start running, and then attach as if \'kub…'
complete -c kubectl-debug -s c -l container -d '	Container name to use for debug container'
complete -c kubectl-debug -l copy-to -d '	Create a copy of the target Pod with this name'
complete -c kubectl-debug -l env -d '	Environment variables to set in the container'
complete -c kubectl-debug -l image -d '	Container image to use for debug container'
complete -c kubectl-debug -l image-pull-policy -d '	The image pull policy for the container'
complete -c kubectl-debug -l profile -d '	Debugging profile'
complete -c kubectl-debug -s q -l quiet -d '	If true, suppress informational messages'
complete -c kubectl-debug -l replace -d '	When used with \'--copy-to\', delete the original Pod'
complete -c kubectl-debug -l same-node -d '	When used with \'--copy-to\', schedule the copy of target Pod on the same node'
complete -c kubectl-debug -l set-image -d '	When used with \'--copy-to\', a list of name=image pairs for changing containe…'
complete -c kubectl-debug -l share-processes -d '	When used with \'--copy-to\', enable process namespace sharing in the copy'
complete -c kubectl-debug -s i -l stdin -d '	Keep stdin open on the container(s) in the pod, even if nothing is attached'
complete -c kubectl-debug -l target -d '	When using an ephemeral container, target processes in this container name'
complete -c kubectl-debug -s t -l tty -d '	Allocate a TTY for the debugging container'
complete -c kubectl-debug -l as -d '	Username to impersonate for the operation'
complete -c kubectl-debug -l as-group -d '	Group to impersonate for the operation, this flag can be repeated to specify…'
complete -c kubectl-debug -l as-uid -d '	UID to impersonate for the operation'
complete -c kubectl-debug -l azure-container-registry-config -d '	Path to the file containing Azure container registry configuration informati…'
complete -c kubectl-debug -l cache-dir -d '	Default cache directory'
complete -c kubectl-debug -l certificate-authority -d '	Path to a cert file for the certificate authority'
complete -c kubectl-debug -l client-certificate -d '	Path to a client certificate file for TLS'
complete -c kubectl-debug -l client-key -d '	Path to a client key file for TLS'
complete -c kubectl-debug -l cluster -d '	The name of the kubeconfig cluster to use'
complete -c kubectl-debug -l context -d '	The name of the kubeconfig context to use'
complete -c kubectl-debug -l disable-compression -d '	If true, opt-out of response compression for all requests to the server'
complete -c kubectl-debug -l insecure-skip-tls-verify -d '	If true, the server\'s certificate will not be checked for validity'
complete -c kubectl-debug -l kubeconfig -d '	Path to the kubeconfig file to use for CLI requests'
complete -c kubectl-debug -l match-server-version -d '	Require server version to match client version'
complete -c kubectl-debug -s n -l namespace -d '	If present, the namespace scope for this CLI request'
complete -c kubectl-debug -l password -d '	Password for basic authentication to the API server'
complete -c kubectl-debug -l profile-output -d '	Name of the file to write the profile to'
complete -c kubectl-debug -l request-timeout -d '	The length of time to wait before giving up on a single server request'
complete -c kubectl-debug -s s -l server -d '	The address and port of the Kubernetes API server'
complete -c kubectl-debug -l tls-server-name -d '	Server name to use for server certificate validation'
complete -c kubectl-debug -l token -d '	Bearer token for authentication to the API server'
complete -c kubectl-debug -l user -d '	The name of the kubeconfig user to use'
complete -c kubectl-debug -l username -d '	Username for basic authentication to the API server'
complete -c kubectl-debug -l version -d '	Print version information and quit'
complete -c kubectl-debug -l warnings-as-errors -d '	Treat warnings received from the server as errors and exit with a non-zero e…'

